<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="utf-8">
<title>WFP Dashboard Display</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<style>
  html, body { margin:0; padding:0; height:100%; width:100%; background:#000; overflow:hidden; }
  #wrap { position:absolute; top:50%; left:50%; transform-origin:top left; background:#000; }
  iframe { border:none; display:block; }
  #loading { position:absolute; inset:0; display:grid; place-items:center; color:#aaa; font-family:system-ui,Arial; background:#000; opacity:0; transition:opacity .25s; pointer-events:none; }
  #loading.show { opacity:.8; }
  /* мини-подсказка для тюнинга */
  #hint { position:fixed; right:8px; bottom:8px; color:#888; font:12px/1.3 system-ui,Arial; background:rgba(0,0,0,.5); padding:6px 8px; border-radius:6px; }
</style>
</head>
<body>
<div id="wrap"><iframe id="frame" src="" sandbox="allow-same-origin allow-scripts allow-popups allow-forms" referrerpolicy="no-referrer" loading="eager"></iframe></div>
<div id="loading">Loading…</div>
<div id="hint">[ / ] масштаб −/+, 0 — сброс для текущего URL</div>

<script>
  // Твои URL
  const urls = [
    // 1) Tableau Market Update
    "https://analytics.wfp.org/t/Public/views/TajikistanMarketUpdate_September15-21_2025/TajikistanMarketPriceUpdate?:embed=y&:device=desktop&:toolbar=no&:tabs=no&:showVizHome=no",
    // 2) ArcGIS Cascade
    "https://unwfp.maps.arcgis.com/apps/Cascade/index.html?appid=1e262af203064241b087c64a7a399d35",
    // 3) Tableau CCARB
    "https://analytics.wfp.org/t/Public/views/CCARB-ActivitiesTargetingandMonitoring/CCARB-ActivitiesTargetingandMonitoring?:embed=y&:device=desktop&:toolbar=no&:tabs=no&:showVizHome=no"
  ];

  // Базовые «родные» размеры + ИНДИВИДУАЛЬНЫЙ множитель масштаба (mult)
  // Подбери один раз, потом сохранится в localStorage горячими клавишами
  const profiles = [
    { w: 1600, h: 900,  mult: 1.00 }, // 1) Tableau Market — обычно ок в 1600×900
    { w: 1920, h: 1080, mult: 0.90 }, // 2) Cascade слишком крупная → уменьшим на 10%
    { w: 1920, h: 1080, mult: 1.00 }  // 3) Tableau CCARB
  ];

  // Параметры
  const ROTATE_MS = 60000;  // интервал ротации, мс
  const STEP = 0.02;        // шаг тюнинга масштаба с клавиатуры

  const wrap = document.getElementById('wrap');
  const frame = document.getElementById('frame');
  const loading = document.getElementById('loading');

  let i = 0;

  // Загрузка/сохранение оверрайдов масштаба для каждого URL
  function key(url){ return 'mult:' + url; }
  function loadMult(url, def){ const v = localStorage.getItem(key(url)); return v ? parseFloat(v) : def; }
  function saveMult(url, m){ localStorage.setItem(key(url), String(m)); }

  function showLoader(v){ loading.classList.toggle('show', v); }

  function fit(w, h, mult){
    // размеры iframe — «родные»
    frame.style.width  = w + 'px';
    frame.style.height = h + 'px';

    const vw = window.innerWidth, vh = window.innerHeight;
    const base = Math.min(vw / w, vh / h); // базовый fit по окну
    const scale = base * mult;             // индивидуальный множитель
    wrap.style.transform = `translate(-50%,-50%) scale(${scale})`;
    wrap.style.width = w + 'px';
    wrap.style.height = h + 'px';
  }

  function applyCurrentFit(){
    const url = urls[(i + urls.length - 1) % urls.length]; // сейчас показанный
    const p   = profiles[(i + profiles.length - 1) % profiles.length];
    const mult = loadMult(url, p.mult);
    fit(p.w, p.h, mult);
  }

  function rotate(){
    const url = urls[i];
    const p   = profiles[i];
    const mult = loadMult(url, p.mult);

    fit(p.w, p.h, mult);
    showLoader(true);
    frame.onload = () => showLoader(false);
    frame.src = url;

    i = (i + 1) % urls.length;
  }

  // Горячие клавиши для тюнинга масштаба текущего URL:
  //   ] — увеличить, [ — уменьшить, 0 — сброс к профилю
  window.addEventListener('keydown', (e) => {
    const curIndex = (i + urls.length - 1) % urls.length;
    const url = urls[curIndex];
    const p   = profiles[curIndex];
    let mult = loadMult(url, p.mult);

    if (e.key === ']') { mult = +(mult + STEP).toFixed(3); saveMult(url, mult); applyCurrentFit(); }
    if (e.key === '[') { mult = +(mult - STEP).toFixed(3); saveMult(url, mult); applyCurrentFit(); }
    if (e.key === '0') { mult = p.mult; saveMult(url, mult); applyCurrentFit(); }
  });

  window.addEventListener('resize', applyCurrentFit);

  // Старт ротации
  rotate();
  setInterval(rotate, ROTATE_MS);

  // Service Worker (если sw.js рядом — будет кэш)
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('./sw.js', { scope: './' }).catch(()=>{});
  }
</script>
</body>
</html>
